#%%
import os
import sys
#Add the dir above day run as path for easy import
root_folder = os.path.abspath(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))
sys.path.append(root_folder)
from utils.support import log_time, _877_cache_now, logger, console
from utils import support
from datetime import datetime
import numpy as np

#Set day/year global variables
DAY:int = datetime.now().day
YEAR:int = datetime.now().year

########################################################

## Ready to rumble .... Day 10 let's give it a whirl why don't we!


from collections import deque

def parse_map(input_map):
    return [[int(height) for height in row] for row in input_map.strip().split("\n")]

def find_trailheads(topographic_map):
    trailheads = []
    for r in range(len(topographic_map)):
        for c in range(len(topographic_map[0])):
            if topographic_map[r][c] == 0:
                trailheads.append((r, c))
    return trailheads

def bfs(topographic_map, start):
    """Breadth first search to count reachable '9' positions from a trailhead."""
    rows, cols = len(topographic_map), len(topographic_map[0])
    visited = set()
    queue = deque([start])
    reachable_nines = set()

    while queue:
        r, c = queue.popleft()

        if (r, c) in visited:
            continue
        visited.add((r, c))

        if topographic_map[r][c] == 9:
            reachable_nines.add((r, c))

        for dr, dc in [(-1, 0), (1, 0), (0, -1), (0, 1)]:  # Up, Down, Left, Right
            nr, nc = r + dr, c + dc
            if 0 <= nr < rows and 0 <= nc < cols:
                if topographic_map[nr][nc] == topographic_map[r][c] + 1:
                    queue.append((nr, nc))

    return len(reachable_nines)

def calculate_total_score(input_map):
    topographic_map = parse_map(input_map)
    trailheads = find_trailheads(topographic_map)

    total_score = 0
    for trailhead in trailheads:
        score = bfs(topographic_map, trailhead)
        total_score += score

    return total_score


# Puzzle input 
topographic_map = """987672345210988321089487678943210101985430123012901212349876
890581876347809451276596521058923432876543276529874301236765
081490932156918760345603430667898943109801983434565321245125
112387893045329654565012348766087652234712123403125430104034
201236794532134503456983289632128141045623010512036765295543
310145687621032012987674108543459031012654107696543894387654
498456546001221093474565432432569122101965298787645976578761
567307632120332387565478901201678233212874345676534589469450
569218986787454456010785832178876544589012321201225676354321
478123678796561234521896541069987235678987430390310101256910
312054569657320899634567892454100124017986543485436543267871
203765012348210798749656876363211345623477012576567654106565
104894343239345687658775965278901210786568943689658987265430
985787210101012210343189034107349809894329876756567456892121
276321895696523421221076121001256756765018549843498305743012
123450734789434322834565432890162125321567678732565214654012
043545643298545618965436901781878034450410589721056543204323
652634102187656709878927801652989876567323434874347890116454
701783214074327812567213452343567865018430128965236921327985
879898543265018903450102169603498984329543012340121023438876
930569856104345676543221078712321075655432121050123214589565
321478987645430189876330789610165034746583043269874303678456
430326786554321234565445698543278129837895650178965452102365
545415898545210765676324582344569100121298782348766567801476
696504305676905894889213001053213256780367091059654321945987
787413218789876103990102128967104345091452187768345670236896
898310129650145212850167034878545432187873677851210980167345
790101212341232101763258949889436782106924578960102398798201
889212303216987232654345656776521093345014467017681432120132
974322454307896342363214780345810894214323454178590541098743
865401965416787651654303291236989765201412963289487672347652
765432876545619650189432100387870652106507875670343781656761
765410987814308761276541087498761543017890124501289890967890
898321678903216654365650196501252102120987033215670767856981
456912565214327612984787767102343256761856144256781056743234
367803454323438703673298898234358543892349856105892343212101
219804456554549654560143567895569212876548761234987454101234
008512367567632103067654410766978103975432810125676655670543
127601898458903452198103328957860198786901912089985765781632
234534567321012560198712367046043245697850105678789854398701
103421673450523871237601452132154032106543214543210710239678
011210982567658964321546543012965124321432343058988720106549
320125671098576545690037012129876765010541012167349634218932
430134040123489836789128903456745895432672123453234545347451
549232132123498721654100190109832106701089098500104456956320
678943433001567890193289283254108987892128987612245437875410
217654456712346521089374374363201076985434376543336521056587
103450349809454434678765465478912345876548985965447899867898
212761212778765894501250104567656210230123476876534038769876
429843203989987765410343215698567340145696545123410125612345
343456117801256784320354210785458756968787034014567234501654
652107006901343098901235341812329647879674123456798012612703
567898215414332187612356756901410138984565012343898543563812
238987312323278076543349867812567221345694321032187623438910
109813408954109189801210789003498210210782107153098018542123
216701567867898276764325650101567367823473498544567129656034
345652101210567345123434543234989456910565567639875678798945
456543458325430410089545696545678321045876543320564549567876
434567869450321523679656787230109878236905452011254235650165
321018978761234334578765698101234569107812301232340123543234"""

# Calculate and print the total score
total_score = calculate_total_score(topographic_map)
print("Total score of all trailheads:", total_score)









########################################################
#Notes
#PART A Notes
## Arggggh finally getting to the bottom of Pip vs Poetry dependency issues ....
# VSCode for whatever reason fails to recognize .secrets.cookie.txt despite clesrly being there ... 
### need to get to the bottom of it , maybe missing a step in poetry bootup routine
##

#PART B Notes
#
#
# %%
